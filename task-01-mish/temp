line: expr { *result = $1; }
;

expr:
  | term                  { ast_current_root = $$; $$ = $1; }
  | VSLASH expr VSLASH    { ast_current_root = $$; $$ = node_unary_op($2, OPERATION_ABS);}
  | SUB expr %prec USUB   { ast_current_root = $$; $$ = node_unary_op($2, OPERATION_NEG); }
  | expr ADD expr         { ast_current_root = $$; $$ = node_binary_op($1, $3, OPERATION_ADD); }
  | expr SUB expr         { ast_current_root = $$; $$ = node_binary_op($1, $3, OPERATION_SUB); }
  | expr MUL expr         { ast_current_root = $$; $$ = node_binary_op($1, $3, OPERATION_MUL); }
  | expr DIV expr         { ast_current_root = $$; $$ = node_binary_op($1, $3, OPERATION_DIV); }
  | expr POW expr         { ast_current_root = $$; $$ = node_binary_op($1, $3, OPERATION_POW); }
;

term:
  NUMBER                  { ast_current_root = $$; CALLOC_CHECKED($$, 1, sizeof(ast_node_t)); AST_NODE_CONSTANT_INITS(*$$, CONSTANT_NUMERICAL); $$->number.number = $1; }
  | ID                    { ast_current_root = $$; $$ = node_id($1); }
  | ID LPAREN expr RPAREN { ast_current_root = $$; $$ = node_func($3, $1); }
  | LPAREN expr RPAREN    { ast_current_root = $$; $$ = $2; }
;